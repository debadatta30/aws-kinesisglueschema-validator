---
AWSTemplateFormatVersion: 2010-09-09
Description: >
    CloudFormation template to create a Kinesis stream , Glue data schema and Lambda Functions for Kineis Producer  validator 
Parameters:
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: Lambda-kinesis-Function
  KinesisStreamName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: Producer
  LambdaRoleName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role-kinesis
  LambdaPolicyName:
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '[\w+=,.@-]+'
    Default: Lambda-Policy-kinesis
  RegistryName:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Description: The name of the bucket where object  need to be download
    Default: KinesisRegistry
  SchemaName:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Description: The name of the bucket where object  need to be download
    Default: KinesisSchema
  SchemaDef:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Description: File Name with url from where the file will be downloaded
    Default: "{\"type\": \"record\", \"name\": \"OrderDetails\", \"fields\": [ {\"name\": \"Quantity\", \"type\": \"int\"}, {\"name\": \"Order\", \"type\": \"string\"} ]}"
Resources:
  DataStream: 
    Type: AWS::Kinesis::Stream 
    Properties: 
        Name: !Ref KinesisStreamName 
        RetentionPeriodHours: 168 
        ShardCount: 1
        
  DataRegistry:
    Type: AWS::Glue::Registry
    Properties: 
      Description: Registry for the Kinesis Schema
      Name: !Ref RegistryName
      
  DataSchema:
    Type: AWS::Glue::Schema
    Properties: 
      Compatibility: NONE
      DataFormat: AVRO
      Description: Schema to hold the fields 
      Name: !Ref SchemaName
      Registry: 
        Arn: !GetAtt DataRegistry.Arn
      SchemaDefinition: !Ref SchemaDef

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
          - Effect: Allow
            Action:
              - 'kinesis:*'
            Resource: !Sub 'arn:${AWS::Partition}:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*'
          - Effect: Allow
            Action:
              - 'glue:GetRegistry'
              - 'glue:GetSchema'
              - 'glue:ListSchemas'
              - 'glue:GetSchemaByDefinition'
              - 'glue:GetSchemaVersion'
              - 'glue:ListSchemaVersions'
            Resource: 
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:registry/*' 
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:schema/*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Join ['',['arn:', !Ref AWS::Partition, ':logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/', !Ref LambdaFunctionName, ':*']]
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['',['/aws/lambda/', !Ref LambdaFunctionName]]
      RetentionInDays: 30
            
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to validate the producer data 
      FunctionName: !Ref LambdaFunctionName
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.8
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 480
      Environment:
        Variables:
          streamName: !Ref KinesisStreamName
          schName: !Ref SchemaName
          regName: !Ref RegistryName
      Code:
        S3Bucket: zipcodebuck
        S3Key: my_deployment_package.zip
                
    
